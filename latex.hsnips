global
// JavaScript code
function gen_matrix(nrow, ncol) {
	let results = "";
	let order = 1;
	for (var i=0; i<nrow; i++){
		results += '	';
		for(var j = 0;j <ncol-1;j++){
			results += "$" +(order ).toString() + " & ";
			order ++;
		}
		results += "$"+(order).toString() +" \\\\" + "\\";
		
		order ++;
	}
	return results;
}

function tes_matrix(nrow, ncol,t) {
	let results = "";
	let order = 1;
	for (var i=0; i<nrow; i++){
		results += '	';
		for(var j = 0;j <ncol-1;j++){
			if (order > 1 ){
				results += "${" +(order ).toString() + ":" + t[order-2] + "}\t & ";
			}
			else{
				results += "$" +(order ).toString()  + " & ";
			}
			order ++;
		}
		results += "$"+(order).toString() +" \\\\" + "\\ ";
		order ++;
	}
	return results;
}

// 输出一个表格
function createTable(rows, cols) {
    let ret = "";
    for (let i = 0; i < parseInt(rows) + 2; i++) {
        for (let j = 0; j < parseInt(cols); j++) {
            if (i === 1) {
                ret += "|:---:";
            } else {
                ret += "|  ";
            }
        }
        ret += "|\n"
    }
    return ret;
}

// 给数字添加千分符
function addComma(num) {
	return num.toString().replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, ",");
}

endglobal

# == LaTeX ==

snippet ' "quote" iA
‘$0’
endsnippet

snippet " "double quote" iA
“$0”
endsnippet

snippet `\.\.\. ` "ldots in the sentence" iA
$\ldots$ 
endsnippet

snippet `\.\.\.\.` "ldots at the end of the sentence" iA
\ldots.
endsnippet

snippet :: "colon" iA
\colon
endsnippet

# == Fraction Match ==

snippet // "Fraction" iAm
\\frac{${1:${VISUAL}}}{$2}$0
endsnippet 

snippet `((\d+)|(\d*)(\\)?([A-Za-z!]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction no ()" iAm
\frac{``rv = m[1]``}{$1}$0
endsnippet

priority 200
snippet `(?<=\s)(\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega|[A-Za-z]{1,2})?(_[A-Za-z0-9]|_\{[^}]+\})?(\^[A-Za-z0-9]|\^\{[^}]+\})?(_[A-Za-z0-9]|_\{[^}]+\})?(\([^)]+\))(_[A-Za-z0-9]|_\{[^}]+\})?(\^[A-Za-z0-9]|\^\{[^}]+\})?(_[A-Za-z0-9]|_\{[^}]+\})?\/` "Fraction with ()" iAm
``rv = "\\frac{" + m.slice(1, m.length).join('') + "}{$1}$2"``
endsnippet

# == Hat Operation ==

# ==== Auto Capture Hat Operation ====
snippet `(\(?)(\\?[a-zA-Z]\w*)(\)?)(bar|BAR)` "bar" iAm
\overline{``rv = m[1] + m[2] + m[3]``}
endsnippet

snippet `(\\?[a-zA-Z]\w*)(htd)` "tilde" iAm
\tilde{``rv = m[1]``}
endsnippet

snippet `(\\?[a-zA-Z]\w*)(wtd|TD)` "wide tilde" iAm
\widetilde{``rv = m[1]``}
endsnippet

snippet `(\\?[a-zA-Z]\w*)(hat|HAT)` "hat" iAm
\widehat{``rv = m[1]``}
endsnippet

snippet `(\\?[a-zA-Z]\w*)(hvec)` "Vector postfix" iAm
\vec{``rv = m[1]``}
endsnippet

snippet `(\\?[a-zA-Z]\w*)(rta)` "Vector postfix" iAm
\overrightarrow{``rv = m[1]``}
endsnippet

snippet `(\\?[a-zA-Z]\w*)(hdot)` "dot" iAm
\dot{``rv = m[1]``}
endsnippet

snippet `(\\?[a-zA-Z]\w*)(hddot)` "ddot" iAm
\ddot{``rv = m[1]``}
endsnippet

# ===== Static Hat Operation ====

snippet hbar "bar" iAm
\overline{$1}$0
endsnippet

snippet hat "hat" iAm
\hat{$1}$0
endsnippet

snippet hsq "\sqrt{}" iAm
\sqrt{${1}}$0
endsnippet

# == Superscript Operation ==

snippet inv "inverse" wAm
^{-1}
endsnippet

priority 10000
snippet TR "transpose" iAm
^{\top}
endsnippet

snippet CL "complement" wAm
^{c}
endsnippet

snippet R+ "R0+" iAm
R_0^+
endsnippet

snippet pow "power" iAm
^{${1:2}}$0
endsnippet

snippet prime "prime" iAm
^{\prime}$0
endsnippet

snippet star "star" iAm
^{*}$0
endsnippet

# == Subscript Operation ==

snippet td "subscript" iAm
_{${1}}$0
endsnippet

priority 100
snippet !td "subscript with negative spacing" iAm
_{\! ${1}}$0
endsnippet

snippet `([A-Za-z])(\d)` "auto subscript" wAm
`` rv = m[1] + "_" + m[2]``
endsnippet

priority 100
snippet `([A-Za-z])_(\d{2})` "auto subscript" wAm
`` rv = m[1] + "_{" + m[2] + "}$0" ``
endsnippet

priority 100
snippet `([A-Za-z])S(\d)` "auto subscript" wAm
`` rv = m[1] + "_{" + m[2] + "$1}$2"``
endsnippet

snippet `\b(?<!\\)([A-Za-z])([a-z])\2` "auto subscript 2" iAm
`` rv = m[1] + "_" + m[2].substring(0, 1) ``
endsnippet

snippet `\b(?<!\\)([A-Za-z])S([a-z])\2` "auto subscript 2" iAm
`` rv = m[1] + "_{" + m[2].substring(0, 1) + "$1}$2"``
endsnippet

# Custom: Add more greek letters
snippet `(\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\omicron|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega|\\Omicron)([a-z])\2` "auto subscript for greek letter" iAm
`` rv = m[1] + "_" + m[2].substring(0, 1) ``
endsnippet

snippet `(\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\omicron|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega|\\Omicron)S([a-z])\2` "auto subscript for greek letter" iAm
`` rv = m[1] + "_{${1:" + m[2].substring(0, 1) + "}}$2"``
endsnippet

# == Font Operation ==

# ==== Static Operation ====

snippet txt "text" iAm
\text{$1}$0
endsnippet

snippet tit "text it" iAm
\textit{$1}$0
endsnippet

snippet mcal "mathcal" im
\mathcal{$1}$0
endsnippet

snippet mbb "mathbb" iAm
\mathbb{$1}$0
endsnippet

snippet mbf "mathbf" iAm
\mathbf{$1}$0
endsnippet

snippet mbf "mathbm" iAm
\mathbf{$1}$0
endsnippet

# ==== Dynamic Operation ====

priority 100
snippet `(\\?[a-zA-Z]\w*)(bf|BF)` "mathbf" iAm
\mathbf{``rv = m[1]``}
endsnippet

priority 100
snippet `(\\?[a-zA-Z]\w*)(bm|BM)` "mathbm" iAm
\bm{``rv = m[1]``}
endsnippet

priority 100
snippet `(\\?[a-zA-Z]\w*)(bs)` "boldsymbol" iAm
\boldsymbol{``rv = m[1]``}
endsnippet

priority 100
snippet `(\\?[a-zA-Z]\w*)mcal` "mathcal" iAm
\mathcal{``rv = m[1].toUpperCase() ``}$0
endsnippet

priority 100
snippet `(?<!\\)\b([a-zA-Z]+)rm` "mathrm" iAm
\mathrm{``rv = m[1]``}
endsnippet

priority 100
snippet `(\\?[a-zA-Z]\w*)mbb` "mathbb" iAm
\mathbb{``rv = m[1]``}$0
endsnippet


# == Auto Symbol ==

snippet oo "\infty" wAm
\infty
endsnippet

snippet ... "cdots" iAm
\cdots
endsnippet

snippet dollar "dollar" iAm
\text{\textdollar}$0
endsnippet

priority 100
snippet `((\d+)|(\d*)(\.\d+)?)##` "add comma" iAm
``
rv = addComma(m[1]);
``
endsnippet

snippet | "middle" iAm
\mid
endsnippet

snippet :: "colon" iAm
\colon
endsnippet

# +... -> , \cdots
# -  ... -> , \cdots
# add a space if there already is one.
priority 101
snippet `(?<=[-+])\s*\.\.\.` "smart cdots" irA
 \cdots
endsnippet

# It seems that \ldots is only used when , ..., 
# ,... -> , \ldots
# ,  ... -> , \ldots
priority 101
snippet `(?<=,)(\s*)\.\.\.` "smart ldots" irA
 \ldots 
endsnippet

snippet +- "plus minus" iAm
\pm
endsnippet

snippet ** "dot multiply" iAm
\cdot 
endsnippet

snippet xx "cross" iAm
\times 
endsnippet

snippet o+ "oplus" iAm
\oplus
endsnippet

snippet oc "propotional to" iAm
\propto
endsnippet

snippet eps "epsilon" wAm
\epsilon
endsnippet

snippet veps "varepsilon" wAm
\varepsilon
endsnippet

snippet `(?<=\b|\d+)(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp|arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|oint|iiint|iint|int|ell|nabla|notin)` "function" wAm
\\``rv = m[1]``
endsnippet

snippet `(?<=\b|\d+)(?<!\\)(mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilon|varphi|phi|chi|psi|omega|omicron|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega|Omicron)` "greek" wAm
\\``rv = m[1]``
endsnippet

# ==== Space Symbol ====
snippet `(?<=\b|\d+)(?<!\\)(quad)` "ln" wAm
\\``rv = m[1]``
endsnippet

snippet , ", " iAm
,\
endsnippet

snippet ; "; " iAm
;\
endsnippet

# ==== Logic Symbol ====


snippet -> "to" iAm
\to 
endsnippet

snippet !> "mapsto" iAm
\mapsto 
endsnippet

snippet vdash "vdash" iAm
\\vdash
endsnippet

snippet => "implies" iAm
\implies
endsnippet

snippet =< "implied by" iAm
\impliedby
endsnippet

snippet EE "exist" iAm
\exists 
endsnippet

snippet AA "forall" iAm
\forall 
endsnippet

# ==== Compare Symbol ====

snippet -- "setminus" iAm
\setminus
endsnippet

snippet >= "greater than" iAm
\geqslant $0
endsnippet

snippet <= "less than" iAm
\leqslant $0
endsnippet

snippet != "no equals" iAm
\neq 
endsnippet

snippet == " constan equals" iAm
\equiv 
endsnippet

snippet ~~ " Amppro equals" iAm
\approx 
endsnippet

snippet ~= " Amppro equals2" iAm
\cong
endsnippet

snippet >> ">>" iAm
\gg
endsnippet

snippet << "<<" iAm
\ll
endsnippet

snippet sim "similar to" iAm
\sim
endsnippet

snippet succ "succeeds" iAm
\succ
endsnippet

snippet >~ "succeeds or similar to" iAm
\succsim
endsnippet

# == Auto Environment ==

# ==== Auto Math Mode ====

snippet lm "inline Math" wA
$${1}$$0
endsnippet

snippet dm "display Math" wA
$$
${1}
$$$0
endsnippet

# ==== Common Environment ====

snippet case "cases" wAm
\begin{cases}
	$1 \\\\
\end{cases}
endsnippet

snippet ali "aligned" wAm
\begin{aligned}
$1 \\\\
\end{aligned}
endsnippet

snippet eqt "equation" wAm
\begin{equation}
$1 \\\\
\end{equation}
endsnippet

snippet split "split" wAm
\begin{split}
$1 \\\\
\end{split}
endsnippet

# == Auto Adaptive Close ==

priority 100
snippet lr "left( right)" Aim
\left(${1} \right) $0
endsnippet

priority 100
snippet LR "left[ right]" Aim
\left[${1} \right] $0
endsnippet

priority 100
snippet @| "left| right|" Aim
\left| ${1} \right| $0
endsnippet

priority 100
snippet @{} "left\{ right\}" Aim
\left\\{${1} \right\\} $0
endsnippet

snippet <> "inner product" iAm
\left<${1} \right>$0
endsnippet

snippet ( "auto close ()" iA
(${1})
endsnippet

snippet { "auto close {}" iA
{${1}}
endsnippet

snippet [ "auto close []" iA
[${1}]
endsnippet

priority 200
snippet norm iAm
\left\| ${1} \right\|_{$2}$3
endsnippet

# == Snippet ==

# ==== General Snippet ====

# ====== Lite Snippet ======

snippet Var "Variance" iAm
\Var
endsnippet

snippet Cov "Covariance" iAm
\Cov
endsnippet

snippet label "label" iAm
\label{$1}
endsnippet

snippet tag "tag" iAm
\tag{$1}
endsnippet

priority 100
snippet notag "notag" iAm
\notag
endsnippet

snippet ref "eqref" iAm
\eqref{$1}
endsnippet

snippet xyb "Auto (x, y)" iAm
(x, y)
endsnippet

snippet xyzb "Auto (x, y ,z)" iAm
(x, y, z)
endsnippet

snippet prob "Probabilit Space" iAm
(\Omega,\ \mathcal{F},\ \mathbb{P})
endsnippet

# Unkown
snippet rij "mrij" iAm
(${1:x}_${2:n})_{${3:$2} \\in ${4:N}}$0
endsnippet

priority 200
snippet abs "absolute value" iAm
\left\vert ${1} \right\vert $0
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

# ======== N Series ========

priority 100
snippet comma "comma" iAm
${1:x}_1,\ ${1:x}_2,\ \\cdots,\ ${1:x}_${2:n}
endsnippet

snippet `\b([a-z])=n` "i=1,2,\cdots,n" wAm
``rv = m[1]``=1,\ 2,\ \cdots,\ n
endsnippet

# ======== Common Operator Snippet ========

snippet `(?<!\\)sum` "sum" wAm
\sum\limits_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" wAm
\sum\limits_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet `(?<!\\)lim` "limit" wAm
\lim\limits_{${1:n} \to ${2:\infty}} 
endsnippet

snippet `(?<!\\)prod` "product" wAm
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet `(?<!\\)part` "d/dx" wAm
\frac{\partial ${1:V}}{\partial ${2:x}}$0
endsnippet

priority 100
snippet `(?<!\\)diff` "d/dx" wAm
\frac{\mathrm{d}${1:y}}{\mathrm{d}${2:x}}$0
endsnippet

snippet uu "union" wAm
\cup $0
endsnippet

snippet funion "finite union" wAm
\bigcup_{${1:i = 1}}^{${2:n}} $0
endsnippet

snippet cunion "countable union" wAm
\bigcup_{${1:i = 1}}^{${2:\infty}} $0
endsnippet

snippet nn "intersection" wAm
\cap $0
endsnippet

snippet fitsct "finite intersection" wAm
\bigcap_{${1:i = 1}}^{${2:n}} $0
endsnippet

snippet citsct "countable intersection" wAm
\bigcap_{${1:i = 1}}^{${2:\infty}} $0
endsnippet

priority 100
snippet dint "integral" wAm
\int_{${1:-\infty}}^{${2:\infty}} ${3} ~\\mathrm{d}${4:x} $0
endsnippet

priority 200
snippet `c(o|n)?(l|n)?(b|c)?int` "s 	egral" wAm
``
let final = "\\"; // init
let isO = m[1] == "o";
(isO) ? final += "o" : "" // o option
let b = 1;
let isL = m[2] == "l";
(m[3] == 'b') ? b = 2 : (m[3] == 'c') ? b = 3 : 1;
for (let i = 0; i < b - 1; i++) {
final += "i";
}
final += "int";
final += ((b >= 2) || (b != 1 && !isO && isL)) ? "\\limits" : "";
let r = (b == 3) ? "E" : (b == 1 && (isL || isO)) ? "C" : "R";
final += ((b >= 2) || isO || (b == 1 && isL)) ? "_{${1:" + r + "}}" : "_{${1:-\\infty}}^{${2:\\infty}}";
let x = (b == 2) ? "A" : (b == 3) ? "V" : (b == 1 && isL) ? "s" : "x";
final += " ${3} ~\\mathrm{d}${4:" + x + "} $0";
rv = final;
``
endsnippet

snippet opn "operator name" iAm
\\operatorname{$1}
endsnippet

# Custom: Can add more defined operator
priority 100
snippet `(?<![\a-zA-Z])(rank|lcm|gcd)` "math function" wAm
\\operatorname{``rv = m[1]``}
endsnippet

snippet `(?<![\a-zA-Z])arg(max|min)` "argmin/max" wAm
\underset{$1}{\mathop{\arg\\``rv = m[1]``}} ~ $0
endsnippet

# ====== Big Snippet ======

snippet bigdef "Big function" iAm
\begin{equation$6}
    \begin{aligned}
        $1\colon $2 &\longrightarrow $3 \\\\
                 $4 &\longmapsto $1($4) = $5
    \end{aligned}
\end{equation$6}$0
endsnippet

snippet bigmin "Optimization problem" iAm
\begin{aligned}
	\min_${1:x} &\quad ${2:f(x)}\\\\
	\text{s.t.} &\quad ${3:g(x)} \leq 0\\\\
\end{aligned}
endsnippet

snippet bigmax "Optimization problem" wAm
\begin{aligned}
	\max_${1:x} &\quad ${2:f(x)}\\\\
	\text{s.t.} &\quad ${3:g(x)} \leq 0\\\\
\end{aligned}
endsnippet

snippet deff "Definition of function" wAm
$1\colon ${2:\\mathbb{R\}} \to ${3:\\mathbb{R\}}, ${4:x} \mapsto $0
endsnippet


snippet iid "independent and identical distribution" iAm
\overset{\text{i.i.d.}}{\sim}
endsnippet

snippet defe "define equal" wAm
\overset{\underset{\mathrm{def}}{}}{=}
endsnippet

snippet min "minimize" wAm
\underset{$0}{\min} ~ $1
endsnippet

snippet max "maximize" wAm
\underset{$1}{\max} ~ $0
endsnippet

snippet sup "supremum" wAm
\underset{$1}{\sup} ~ $0
endsnippet

snippet inf "infimum" wAm
\underset{$1}{\inf} ~ $0
endsnippet

# == Matrix ==

# ==== Static Matrix ====

snippet pmat "pmat" wm
\begin{pmatrix} 
    ${1: } 
\end{pmatrix} $0
endsnippet

snippet bmat "pmat" wm
\begin{bmatrix} 
    $1 
\end{bmatrix} $0
endsnippet

snippet vecC "column vector" iAm
\begin{bmatrix} ${1:x}_1 \\\\ ${1:x}_2 \\\\ \vdots \\\\ ${1:x}_${2:n} \end{bmatrix}
endsnippet

snippet vecR "row vector" iAm
\begin{bmatrix} ${1:x}_1, ${1:x}_2, \cdots, ${1:x}_${2:n} \end{bmatrix}$0
endsnippet

priority 300
snippet omis "omission" iAm
\\begin{bmatrix}${1:1}&${2:1}&\\cdots&${4:1}\\\\${5:1}&${6:1}&\\cdots&${8:1}\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\${13:1}&${14:1}&\\cdots&${16:1}\\end{bmatrix}
endsnippet

priority 300
snippet submat "omission" iAm
\\begin{pmatrix}
    ${1:a}_{11} & ${1:a}_{12} & \\cdots & ${1:a}_{1n} \\\\
    ${1:a}_{21} & ${1:a}_{22} & \\cdots & ${1:a}_{2n} \\\\
    \\vdots & \\vdots & \\ddots & \\vdots \\\\
    ${1:a}_{n1} & ${1:a}_{n2} & \\cdots & ${1:a}_{nn}
\\end{pmatrix}
endsnippet

priority 300
snippet subplusmat "omission" iAm
\\begin{pmatrix}
    ${1:a}_{11}+{2:b}_{11} & ${1:a}_{12}+{2:b}_{12} & \\cdots & ${1:a}_{1n}+{2:b}_{1n} \\\\
    ${1:a}_{21}+{2:b}_{21} & ${1:a}_{22}+{2:b}_{22} & \\cdots & ${1:a}_{2n}+{2:b}_{2n} \\\\
    \\vdots & \\vdots & \\ddots & \\vdots \\\\
    ${1:a}_{n1}+{2:b}_{n1} & ${1:a}_{n2}+{2:b}_{n2} & \\cdots & ${1:a}_{nn}+{2:b}_{nn}
\\end{pmatrix}
endsnippet

snippet jacobi "jacobi" iAm
\\begin{pmatrix}\\frac{\\partial ${1:f}_1}{\\partial ${2:x}_1}&\\frac{\\partial ${1:f}_1}{\\partial ${2:x}_2}&\\cdots&\\frac{\\partial ${1:f}_1}{\\partial ${2:x}_${3:n}}\\\\\\frac{\\partial ${1:f}_2}{\\partial ${2:x}_1}&\\frac{\\partial ${1:f}_2}{\\partial ${2:x}_2}&\\cdots&\\frac{\\partial ${1:f}_2}{\\partial ${2:x}_${3:n}}\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\\\frac{\\partial ${1:f}_${3:m}}{\\partial ${2:x}_1}&\\frac{\\partial ${1:f}_${3:m}}{\\partial ${2:x}_2}&\\cdots&\\frac{\\partial ${1:f}_${3:m}}{\\partial ${2:x}_${3:n}}\\end{pmatrix}
endsnippet

# ==== Dynamic Matrix ====

priority 300
snippet `(b|p|v)mata([1-9])` "bmatrix" iwAm
\\begin{``rv = m[1]``matrix}``
	let len = m[2];
	let results = "";
	for (var i=0; i<len; i++){
		results += "$1 &".repeat(len-1) + " $1 \\\\\\\\";
	}
	rv = results;
``\\end{``rv = m[1]``matrix}$0
endsnippet

priority 300
snippet `(b|p|v)mat([1-9])` "bmatrix" iwAm
\\begin{``rv = m[1]``matrix}``
	rv = gen_matrix(m[2],m[2]);
``\\end{``rv = m[1]``matrix}$0
endsnippet

priority 300
snippet `vec([1-9])` "col vector" iwAm
\\begin{bmatrix}``
    rv = gen_matrix(m[1], 1);
``\\end{bmatrix}$0
endsnippet

priority 300
snippet `vecr([1-9])` "row vector" iwAm
\\begin{bmatrix}``
    rv = gen_matrix(1, m[1]);
``\\end{bmatrix}$0
endsnippet


# == General ==

snippet box "Box" wA
``rv = '┌' + '─'.repeat(t[0].length + 2) + '┐'``
│ $1 │
``rv = '└' + '─'.repeat(t[0].length + 2) + '┘'``
endsnippet


priority 300
snippet `table(\d)(\d)` "create table with rows and columns" wA
``
rv = createTable(m[1], m[2]);
``
endsnippet

priority 300
snippet `((\d+)|(\d*)(\.\d+)?),,` "add comma" iA
``
rv = addComma(m[1]);
``
endsnippet

# == Slide ==

priority 300
snippet `lfrag(\d)` "add slide fragment on list" wA
``
rv = '<!-- .element: class="fragment" data-fragment-index="'+m[1]+'" -->'
``
endsnippet

priority 300
snippet `hfrag(\d)(\d)` "add slide fragment on header" wA
``
rv = '<h'+m[1]+' class="fragment" data-fragment-index="'+m[2]+'"></h'+m[1]+'>'
``
endsnippet

priority 300
snippet `pfrag(\d)` "add slide fragment on paragraph" wA
``
rv = '<p class="fragment" data-fragment-index="'+m[1]+'"></p>'
``
endsnippet

priority 300
snippet `sfrag(\d)` "add slide fragment on span" wA
``
rv = '<span class="fragment" data-fragment-index="'+m[1]+'"></span>'
``
endsnippet

priority 300
snippet `ifrag(\d)` "add slide fragment on image" wA
``
rv = '<img class="fragment" data-fragment-index="'+m[1]+'" src=>'
``
endsnippet